---
title: "Dependent Variables States"
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(sf)
library(ggrepel)
library(scales)
library(shiny)
library(shinycssloaders)
library(ggiraph)
library(kableExtra)
library(rmapshaper)
library(cowplot)
library(DT)
library(htmlwidgets)
library(RColorBrewer)
library(readxl)
library(janitor)
library(lubridate)
library(systemfonts)
reset_font_cache()
library(ggtext)
library(gmodels)
library(leaps)
library(bestglm)
library(fastDummies)
library(car)
library(FactoMineR)
library(factoextra)
library(psych)
library(corrplot)
```

```{r join docs, include=FALSE}
theme_bar <- theme_bw() +
  theme(panel.grid.major = element_line(color = "grey70", size = 0.1),
        panel.grid.minor = element_blank(),
        axis.ticks = element_blank(),
        axis.text = element_text(face = "bold"),
        panel.border = element_blank(),
        legend.background = element_rect(fill = "transparent", color = "transparent"),
        legend.key = element_rect(fill = "transparent"),
        legend.key.size = unit(1, "lines"),
        legend.margin = margin(0,0,0,0),
        legend.title = element_blank(),
        legend.text = element_text(margin = margin(l = 2)),
        text = element_text(family = "Arial") ,
        plot.title.position = "plot",
        plot.title = element_text(face = "bold"))

theme_line <- theme_bw() +
  theme(legend.background = element_rect(fill = "transparent", color = "transparent"),
        legend.key = element_rect(fill = "transparent"),
        legend.text = element_text(margin = margin(l = 2)),
        panel.grid.minor = element_blank(),
        panel.grid.major = element_line(color = "grey70", size = 0.1),
        axis.ticks = element_blank(),
        axis.text = element_text(face = "bold"),
        panel.border = element_blank(),
        legend.margin = margin(0,0,0,0),
        legend.key.size = unit(1, "lines"),
        text = element_text(family = "Arial") ,
        plot.title.position = "plot",
        plot.title = element_text(face = "bold"))


theme_sf <- theme_bw() +
  theme(axis.text.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks=element_blank(),
        panel.background = element_blank(),
        panel.grid.major = element_line(color = "white"),
        panel.border = element_blank(),
        legend.title = element_blank(),
        legend.text = element_text(margin = margin(l = 2)),
        legend.margin = margin(0,0,0,0),
        legend.key.size = unit(1, "lines"),
        text = element_text(family = "Arial") ,
        plot.title.position = "plot",
        plot.title = element_text(face = "bold"))

regions <- read_csv('/Users/kellyasche/Library/CloudStorage/GoogleDrive-kasche@ruralmn.org/My Drive/Data Prep/R Projects/Join docs/county_regions.csv') %>%
    select(5,6) %>%
    unique() %>%
    mutate(edr = str_replace(edr, "  ", " "),
           planning.region = str_replace(planning.region, " Minnesota", ""),
           planning.region = fct_relevel(planning.region, "Northwest", "Northeast", "Central", "Seven County Mpls-St Paul", "Southwest", "Southeast"),
           edr = fct_relevel(edr, "EDR 1 - Northwest", "EDR 2 - Headwaters", "EDR 3 - Arrowhead", "EDR 4 - West Central", "EDR 5 - North Central", "EDR 6E- Southwest Central", "EDR 6W- Upper Minnesota Valley", "EDR 7E- East Central", "EDR 7W- Central", "EDR 8 - Southwest", "EDR 9 - South Central", "EDR 10 - Southeast", "EDR 11 - 7 County Twin Cities", "Minnesota"))

counties.regions <- read_csv('/Users/kellyasche/Library/CloudStorage/GoogleDrive-kasche@ruralmn.org/My Drive/Data Prep/R Projects/Join docs/county_regions.csv') %>%
  rename(mif = `MIF Region`) %>%
  mutate(countyfp = formatC(countyfp, width = 3, flag = "0"),
         Name = str_to_title(Name),
         Name = str_replace(Name, "Q", "q"),
         Name = str_replace(Name, "Of The", "of the"),
         Name = str_replace(Name, "Mcleod", "McLeod"),
         Dem_Desc = ifelse(Name == "Minnesota", "Minnesota", Dem_Desc) ,
         edr = str_replace(edr, "  ", " "),
         planning.region = str_replace(planning.region, " Minnesota", ""),
         planning.region = fct_relevel(planning.region, "Northwest", "Northeast", "Central", "Seven County Mpls-St Paul", "Southwest", "Southeast"),
         edr = fct_relevel(edr, "EDR 1 - Northwest", "EDR 2 - Headwaters", "EDR 3 - Arrowhead", "EDR 4 - West Central", "EDR 5 - North Central", "EDR 6E- Southwest Central", "EDR 6W- Upper Minnesota Valley", "EDR 7E- East Central", "EDR 7W- Central", "EDR 8 - Southwest", "EDR 9 - South Central", "EDR 10 - Southeast", "EDR 11 - 7 County Twin Cities", "Minnesota"),
         mif = ifelse(is.na(mif), "TC", mif),
         mif = as.factor(mif),
         mif = fct_relevel(mif, "NW", "NE", "WC", "EC", "SW", "SE", "TC"))


color.ruca <- c("Entirely rural" = "#009933", "Town/rural mix" = "#99CC33", "Urban/town/rural mix" = "#CC9966", "Entirely urban" = "#754C29", "Minnesota" = "black")

color.pr <- c("Northwest" = 	"#4575b4", "Northeast" = "grey", "Central" = "#fee090", "Seven County Mpls-St Paul" = "#d73027", "Southwest" = "#91bfdb", "Southeast" = "#fc8d59", "Minnesota" = "black")

color.edr <- c("EDR 1 - Northwest" = "#b3cde3", "EDR 2 - Headwaters" = "#8c96c6", "EDR 3 - Arrowhead" = "#fe9929", "EDR 4 - West Central" = "#8856a7", "EDR 5 - North Central" = "#810f7c", "EDR 6E- Southwest Central" = "#e5f5f9", "EDR 6W- Upper Minnesota Valley" = "#bdc9e1", "EDR 7E- East Central" = "#99d8c9", "EDR 7W- Central" = "#2ca25f", "EDR 8 - Southwest" = "#74a9cf", "EDR 9 - South Central" = "#0570b0", "EDR 10 - Southeast" = "#d7301f", "EDR 11 - 7 County Twin Cities" = "#d8b365", "Minnesota" = "black")

color.pr.edr <- c ("Northwest" = "#4575b4","Northeast" = "#e0f3f8", "Central" = "#fee090", "Seven County Mpls-St Paul" = "#d73027", "Southwest" = "#91bfdb", "Southeast" = "#fc8d59", "Minnesota" = "black", "EDR 1 - Northwest" = "#b3cde3", "EDR 2 - Headwaters" = "#8c96c6", "EDR 3 - Arrowhead" = "#fe9929", "EDR 4 - West Central" = "#8856a7", "EDR 5 - North Central" = "#810f7c", "EDR 6E- Southwest Central" = "#e5f5f9", "EDR 6W- Upper Minnesota Valley" = "#bdc9e1", "EDR 7E- East Central" = "#99d8c9", "EDR 7W- Central" = "#2ca25f", "EDR 8 - Southwest" = "#74a9cf", "EDR 9 - South Central" = "#0570b0", "EDR 10 - Southeast" = "#d7301f", "EDR 11 - 7 County Twin Cities" = "#d8b365")

mn_counties <- st_read('/Users/kellyasche/Library/CloudStorage/GoogleDrive-kasche@ruralmn.org/My Drive/Data Prep/R Projects/Shapefiles/County shapefiles/MNCounties_MNDOT.shp', quiet = TRUE) %>%
  ms_simplify(keep = .01, keep_shapes = TRUE) %>%
  rename(countyfp = FIPS_CODE)
```

```{r master original}
master.original <- read_csv("Data/SLEDS/Masters/Master-updated-1.csv")

```

<br>

There are many paths in which an individual can take after graduating high school. What we are most concerned with is whether an individual has "meaningful" employment, when and where this employment takes place, and are there any variables that are associated with each of these pathways.

The paths that we want to identify are the following;

1.  Meaningful employment - same county as high school
2.  Meaningful employment - same EDR as high school, but not the same county
3.  Meaningful employment - in NE Minnesota, but not in the same EDR as their high school
4.  Meaningful employment - in Minnesota, but not in Northeast Minnesota
5.  Not meaningful employment or no MN Employment record - attending post-secondary
6.  Not meaningful employment - not attending post-secondary
7.  No MN employment record - not attending post-secondary

We are going to assess each PersonID on which of those pathways they are at the time of their high school graduation, and each subsequent year up to 2023.

We have already created the employment states for each year.

<br>

```{r master employment states each year, include=TRUE}
master.emp.states.yearly <- read_csv("Data/SLEDS/Masters/Master-emp-states-each-year.csv") %>%
  mutate(grad.year = fct_relevel(grad.year, "grad.year.0", "grad.year.1", "grad.year.2", "grad.year.3", "grad.year.4", "grad.year.5", "grad.year.6", "grad.year.7", "grad.year.8", "grad.year.9", "grad.year.10", "grad.year.11", "grad.year.12", "grad.year.13", "grad.year.14", "grad.year.15"),
         county.match = fct_relevel(county.match, "Meaningful emp - match", "Meaningful emp - no match", "MN emp record - not meaningful", "No MN emp record", "After 2023"),
         edr.match = fct_relevel(edr.match, "Meaningful emp - match", "Meaningful emp - no match", "MN emp record - not meaningful", "No MN emp record", "After 2023"),
         region.match = fct_relevel(region.match, "Meaningful emp - match", "Meaningful emp - no match", "MN emp record - not meaningful", "No MN emp record", "After 2023"),
         Dem_Desc.match = fct_relevel(Dem_Desc.match, "Meaningful emp - match", "Meaningful emp - no match", "MN emp record - not meaningful", "No MN emp record", "After 2023"),
         state.match = fct_relevel(state.match, "Meaningful emp - match", "MN emp record - not meaningful", "No MN emp record", "After 2023"))

kable(head(master.emp.states.yearly))

kable(names(master.emp.states.yearly))

```

<br>

# Employment states

The employment states dataset has `r comma(nrow(master.emp.states.yearly))` rows and `r comma(ncol(master.emp.states.yearly))` columns providing the year they graduated high school, the subsequent year title after graduating high school (grad.year.0, grad.year.1, grad.year.2 ..... grad.year.x) and the employment state for each PersonID and grad.year.x. The employment states for each geography location and grad.year.x are;

-   Meaningful employment - geography match
-   Meaningful employment - no geographic match
-   Has MN emp record - not meaningful employment
-   Has no MN employment record
-   the grad.year.x is after 2019.

Ultimately we want a dataset that has this information paired together with whether the PersonID was attending a post-secondary institution at each grad.year.x. So let's prep that data.

<br>

# Prep Post-secondary data

Okay, lets check out the National Student Clearinghouse enrollment data.

<br>

```{r nsc enrollment originals, echo=TRUE}
grads <- read_csv("Data/SLEDS/Masters/Master.csv") %>%
  select(PersonID)

nsc.enrollment.original <- read_csv('/Users/kellyasche/Library/CloudStorage/GoogleDrive-kasche@ruralmn.org/My Drive/Research/FY25-27/FY25/OHE Journey to meaningful employment/Data/SLEDS/NSCEnrollment/NSC_Enrollments.csv') %>%
  mutate(PersonID = as.integer(PersonID),
         OPEID = str_pad(OPEID, width = 8, side = "left", pad = "0"),
         OPEID.6 = str_sub(OPEID, 1, 6)) %>%
  drop_na(PersonID) %>%
  drop_na(OPEID) %>%
  right_join(grads, by = "PersonID")
  
kable(head(nsc.enrollment.original))

kable(names(nsc.enrollment.original))
```

<br>

The dataset has `r comma(nsc.enrollment.original %>% nrow(), accuracy = 1)` rows and `r comma(nsc.enrollment.original %>% ncol(), accuracy = 1)` columns. Here are the columns and their definitions.

-   EnrollmentBeginTimeID: Begin date for the student's period of attendance.
-   EnrollmentEndTimeID: End date for the student's period of attendance.
-   OPEID: Office of Postsecondary Education (OPE)/FICE code of the college that the student attended (Foreign Key to IPEDSCharacteristics).
-   InstitutionName: Name of institution
-   EnrollmentStatus: The last enrollment status reported for the student. This field will have 'N/A' or "NULL" if the reporting college has not defined the student's enrollment status as directory information. Here are the code definitions;
    -   F: Full-time
    -   Q: Three-quarter time
    -   H: Half-time
    -   L: Less than half-time
    -   A: Leave of absence
    -   W: Withdrawn
    -   D: Deceased

Essentially, this dataset provides semester-based information - each observation is a semester/single period with the institutional information and beginning and end time of that single period (usually a semester). For example, if an individual attended South Dakota State University, attended in a "typical" fashion (fall and spring semesters), and graduated in 4 years, there would be 8 observations for that PersonID - one observation per semester.

The primary pieces of information I want from this dataset is each year a PersonID was attending a post-secondary institution. So let's shrink the dataset down to just the following columns;

-   PersonID
-   unique year attending a post-secondary institution

The PersonID will be filtered using the EnrollmentStatus variable equaling full-time, three-quarter time, half-time, and less than half-time.

For the unique year, it won't matter how many semesters they were attending. If an individual attended half a year, then worked full-time, my meaningful employment definition should pick it up and transfer it into that category. Otherwise, they will be in the category - attending post-secondary with no meaningful employment or no MN employment record.

<br>

```{r prep ipeds, echo = TRUE}

ps.attend.year <- nsc.enrollment.original %>%
  filter(EnrollmentStatus %in% c("F", "H", "Q", "L", "NULL")) %>%
  mutate(begin.year = str_sub(EnrollmentBeginTimeID, 1,4),
         end.year = str_sub(EnrollmentEndTimeID, 1, 4)) %>%
  select(PersonID, begin.year, end.year) %>%
  gather(key = "BeginOrEnd", value = "year", 2:3) %>%
  mutate(year = as.numeric(year)) %>%
  distinct(PersonID, year) %>%
  rename(ps.attend.year = year) %>%
  mutate(ps.attend = "ps.attend")

kable(head(ps.attend.year))

kable(names(ps.attend.year))
```

<br>

After filtering and simplifying the attendance year we have `r comma(nrow(ps.attend.year))` rows and `r comma(ncol(ps.attend.year))` columns.

Now we want to filter out any PersonID that are not in our primary dataset and to align the the years they attended post-secondary with the grad.year.x variable.

<br>

```{r join post secondary with master, echo=TRUE}
ps.grad.year <- master.emp.states.yearly %>%
  select(PersonID, hs.grad.year, grad.year) %>%
  arrange(grad.year, PersonID) %>%
  group_by(PersonID) %>%
  mutate(add = seq(n()) - 1,
         year = hs.grad.year + add) %>%
  ungroup() %>%
  left_join(ps.attend.year, by = c("PersonID", "year" = "ps.attend.year")) %>%
  mutate(ps.attend = ifelse(is.na(ps.attend), "ps.not.attend", ps.attend)) %>%
  select(PersonID, grad.year, ps.attend)
  
kable(head(ps.grad.year))

kable(names(ps.grad.year))
```

<br>

We now have a dataset with `r comma(nrow(ps.grad.year))` rows and `r comma(ncol(ps.grad.year))` columns. We also have `r comma(nrow(distinct(ps.grad.year, PersonID)))` unique individuals.

Now we can join this together with the employment states dataset.

<br>

```{r ps join with emp states, echo = TRUE}
ps.emp.states <- master.emp.states.yearly %>%
  left_join(ps.grad.year, by = c("PersonID", "grad.year"))

kable(head(ps.emp.states))

kable(names(ps.emp.states))

```

<br>

We now have a dataset that provides the employment state and a confirmation on post-secondary attendance for each PersonID and grad.year.x.

Let's analyze.

<br>

# Proportion of individuals per path by grad.year.x

Next we want to figure out the different paths that these group of individuals take. The paths that we are most interested in are the following;

0.  After 2023
1.  Has meaningful employment in same county as high school
2.  Has meaningful employment in same EDR as high school, but not same county
3.  Has meaningful employment in Southwest Minnesota, but not in same EDR as high school.
4.  Has meaningful employment in Minnesota, but not in Southwest Minnesota.
5.  Does not have meaningful employment or a MN employment record, but is attending post-secondary
6.  Does not have meaningful employment and is not attending post-secondary.
7.  Does not have a MN employment record and is not attending post-secondary.

Let's first build a new dataset where each PersonID has one of these seven states for each grad.year.x.

<br>

```{r seven states, echo = TRUE}
seven.states <- ps.emp.states %>%
  mutate(states = ifelse(county.match == "Meaningful emp - match", 1, 99),
         states = ifelse(edr.match == "Meaningful emp - match" & county.match != "Meaningful emp - match", 2, states),
         states = ifelse(region.match == "Meaningful emp - match" & county.match != "Meaningful emp - match" & edr.match != "Meaningful emp - match", 3, states),
         states = ifelse(state.match == "Meaningful emp - match" & county.match != "Meaningful emp - match" & edr.match != "Meaningful emp - match" & region.match != "Meaningful emp - match", 4, states),
         states = ifelse(state.match == "After 2023", 0, states),
         states = ifelse(ps.attend == "ps.attend" & !(states %in% c(0,1,2,3,4)), 5, states),
         states = ifelse(ps.attend == "ps.not.attend" & state.match == "MN emp record - not meaningful", 6, states),
         states = ifelse(ps.attend == "ps.not.attend" & state.match == "No MN emp record", 7, states),
         states = ifelse(states == "0", "After 2023", states),
         states = ifelse(states == "1", "Meaningful emp County", states),
         states = ifelse(states == "2", "Meaningful emp EDR", states),
         states = ifelse(states == "3", "Meaningful emp NE", states),
         states = ifelse(states == "4", "Meaningful emp MN", states),
         states = ifelse(states == "5", "Attending ps", states),
         states = ifelse(states == "6", "Not meaningful, not attending ps", states),
         states = ifelse(states == "7", "No MN emp record, not attending ps", states),
         states = as.factor(states),
         states = fct_relevel(states, "Meaningful emp County", "Meaningful emp EDR", "Meaningful emp region", "Meaningful emp MN", "Attending ps", "Not meaningful, not attending ps", "No MN emp record, not attending ps", "After 2023"))

kable(head(seven.states))

kable(names(seven.states))


write_csv(seven.states, "Data/SLEDS/Masters/States/annual-seven-states.csv")
```

<br>

The new dataset has `r comma(nrow(seven.states))` rows and `r comma(ncol(seven.states))` with `r comma(nrow(distinct(seven.states, PersonID)))` unique individuals. The seven states are labeled as the following;

1.  Meaningful emp County: means they have worked 1,000 hours or more for one employer located in the same county as their high school.
2.  Meaningful emp EDR: means that have worked 1,000 hours or more for one employer located in the same EDR as their high school, but not in the same county.
3.  Meaningful emp SW: means they have worked 1,000 hours or more for one employer located in Southwest Minnesota, but not in the same EDR or county as their high school.
4.  Meaningful emp MN - means they have worked 1,000 hours or more for one employer located in Minnesota, but not in Southwest Minnesota.
5.  Attending ps: Means the individuals either has a MN employment record but it isn't meaningful OR they do not have a MN employment record, but they are attending post-secondary.
6.  Not meaningful, not attending ps: this means they do have a MN employment record, but it isn't meaningful and they are not attending post-secondary.
7.  No MN emp record - not attending ps: this means they do not have a MN employment record nor are they attending a post-secondary institution.

The other designation is "After 2019" which will be filtered out whenever I analyze the dataset.

Let's first take a look at the proportion of individuals that are in each state at each grad.year.x.

The chart below shows the proportion of individuals in the dataset that are in each "state/path" for each grad.year.x. There are a couple of things to highlight.

1.  The percentage of individuals that have meaningful employment is highest when looking at the county level in the early years after high school graduation. However, by 6 years after graduating, the percentage of individuals that graduated from a Southwest high school that have meaningful employment in Minnesota, but outside of the Southwest region balloons to nearly 21%, dwarfing all other meaningful employment within the Southwest region.
2.  Not surprisingly, a very large majority of individuals (62%) attend post-secondary education the year they graduate high school and that declines steadily over the following 4 to 6 years.
3.  The proportion of individuals that are employed but not meaningful, and are not attending post-secondary remains steady throughout the grad.year.x; \~15%.
4.  The proportion of individuals that do not have a MN employment record and are not attending a post-secondary institution increases significantly by 4 years after graduation. By 11 years after graduation, over 36% of the individuals are in this category.

<br>

```{r proportion state by grad year x}
prop.states <- seven.states %>%
  filter(states != "After 2023") %>%
  group_by(grad.year, states) %>%
  summarize(n = n()) %>%
  ungroup() %>%
  group_by(grad.year) %>%
  mutate(pct = n / sum(n)) %>%
  ungroup() %>%
  mutate(data_id = seq(n())) %>%
  group_by(grad.year) %>%
  arrange(desc(states)) %>%
  mutate(cum.pct = cumsum(pct),
         x.loc = cum.pct - ((cum.pct - lag(cum.pct)) / 2),
         x.loc = ifelse(states == "No MN emp record, not attending ps", cum.pct/2, x.loc)) %>%
  ungroup()

test <- seven.states %>%
  filter(states != "After 2023") %>%
  filter(states == "No MN emp record, not attending ps")

names(test)

employment <- read_csv('/Users/kellyasche/Library/CloudStorage/GoogleDrive-kasche@ruralmn.org/My Drive/Research/FY25-27/FY25/OHE Journey to meaningful employment/Data/SLEDS/Employment/Employment.csv') 


employment.test <- employment %>%
  select(PersonID, TimeID, CountyName, EmploymentOrganizationID, USIndustryCode) %>%
  filter(PersonID == 2432)

names(employment)

master.test <- seven.states %>%
  filter(PersonID == 2432)

seven.states.plot <- ggplot(prop.states, aes(as.numeric(grad.year)-1, pct, fill = states, group = states)) +
  geom_area_interactive(aes(data_id = data_id, tooltip = paste("State: ", states, "\n", percent(pct, accuracy = .1), sep = ""))) +
  geom_label_repel(data = filter(prop.states, grad.year %in% c("grad.year.0", "grad.year.6", "grad.year.11")), aes(x = as.numeric(grad.year)-1, y = x.loc, label = paste(grad.year, "\n", percent(pct, accuracy = .1))), show.legend = FALSE) +
  labs(x="Grad Year", y = "Proportion of individuals", color="", title = "Percent share of path by grad year X")+
  scale_y_continuous(labels=scales::percent)+
  scale_x_continuous(breaks = seq(0, 20, 2)) +
  theme_bar+
  scale_fill_manual(values = brewer.pal(n = 7, "RdYlBu"),
                    guide = guide_legend(ncol = 2)) +
  theme(legend.position = "bottom",
        text = element_text(size = 18))


girafe(ggobj = seven.states.plot, width_svg = 10, height_svg = 10) %>%
  girafe_options(opts_selection(type = "none"),
                 opts_sizing(rescale = FALSE))      

```

<br>

From this I think there are 3 primary time.x that we should consider;

grad.year.1 = one year after graduating high school grad.year.5 = six years after graduating high school grad.year.10 = eleven years after graduating
